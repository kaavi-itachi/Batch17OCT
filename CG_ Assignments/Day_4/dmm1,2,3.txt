#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Function to process the string
char *process_string(char *line) {
    char *token;
    char *result = (char *)malloc(80 * sizeof(char)); // Allocate memory for the result
    if (result == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    result[0] = '\0'; // Initialize the result string as empty

    token = strtok(line, " "); // Tokenize the string by spaces
    while (token != NULL) {
        if (result[0] != '\0') {
            strcat(result, "_"); // Add underscore before concatenating the next word
        }
        strcat(result, token); // Concatenate the current word to the result
        token = strtok(NULL, " "); // Get the next token
    }
    return result; // Return the concatenated string
}

int main() {
    char line[80];
    char *finalString;

    // Read a line of text
    printf("Enter a line of text (max 80 characters): ");
    fgets(line, 80, stdin);

    // Remove trailing newline character if it exists
    line[strcspn(line, "\n")] = '\0';

    // Process the string
    finalString = process_string(line);

    // Display the concatenated string
    printf("Concatenated String: %s\n", finalString);

    // Free the allocated memory
    free(finalString);

    return 0;
}







2. 

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// Structure to store the URL components
struct url {
    char *host;
    char *domain;
};

// Function to validate the URL format
int isValidURL(char *url) {
    if (strstr(url, "http://") == url || strstr(url, "https://") == url) {
        return 1; // URL starts with "http://" or "https://"
    }
    return 0; // Invalid URL
}

// Function to extract and return the host name
char *gethost(char *url) {
    char *start = strstr(url, "://");
    if (start != NULL) {
        start += 3; // Skip "://"
        char *end = strchr(start, '.');
        if (end != NULL) {
            int length = end - start;
            char *host = (char *)malloc((length + 1) * sizeof(char));
            strncpy(host, start, length);
            host[length] = '\0';
            return host;
        }
    }
    return NULL;
}

// Function to extract and return the domain name
char *getdomain(char *url) {
    char *start = strstr(url, "://");
    if (start != NULL) {
        start += 3; // Skip "://"
        char *end = strchr(start, '/');
        if (end != NULL) {
            int length = end - start;
            char *domain = (char *)malloc((length + 1) * sizeof(char));
            strncpy(domain, start, length);
            domain[length] = '\0';
            return domain;
        }
    }
    return NULL;
}

// Function to display the URL structure
void display(struct url *obj) {
    if (obj != NULL) {
        printf("Host: %s\n", obj->host);
        printf("Domain: %s\n", obj->domain);
    }
}

// Function to free the allocated memory for URL components
void freeURL(struct url *obj) {
    if (obj != NULL) {
        free(obj->host);
        free(obj->domain);
        free(obj);
    }
}

int main() {
    char url[100];
    struct url *urlObj;

    // Read URL from the user
    printf("Enter a URL: ");
    fgets(url, 100, stdin);

    // Remove newline character if it exists
    url[strcspn(url, "\n")] = '\0';

    // Validate the URL
    if (isValidURL(url)) {
        urlObj = (struct url *)malloc(sizeof(struct url));

        // Extract host and domain
        urlObj->host = gethost(url);
        urlObj->domain = getdomain(url);

        // Display the extracted information
        display(urlObj);

        // Free the allocated memory
        freeURL(urlObj);
    } else {
        printf("Invalid URL!\n");
    }

    return 0;
}


3.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to allocate memory for a double pointer to hold n pointers
char **allocate_array_memory(char **ptr, int n) {
    ptr = (char **)malloc(n * sizeof(char *)); // Allocate memory for the array of strings
    if (ptr == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    return ptr;
}

// Function to allocate memory for a single string
char *allocate_string_memory(char *string) {
    char *str = (char *)malloc((strlen(string) + 1) * sizeof(char)); // Allocate memory for the string
    if (str == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    strcpy(str, string); // Copy the string to allocated memory
    return str;
}

// Function to display the stored strings
void display(char **arr, int n) {
    printf("\nStored Strings:\n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", arr[i]);
    }
}

// Function to free the memory allocated for the array of strings
void free_array_memory(char **ptr, int n) {
    for (int i = 0; i < n; i++) {
        free(ptr[i]); // Free each string
    }
    free(ptr); // Free the array of string pointers
}

// Function to free the memory allocated for a single string
void free_string_memory(char *ptr) {
    free(ptr); // Free the string
}

int main() {
    int N;
    char **arr;
    char temp[81];
    int count = 0;

    // Read the number of strings to be stored
    printf("Enter the number of strings to read (N): ");
    scanf("%d", &N);
    getchar(); // Consume the newline character left by scanf

    // Allocate memory for the array of strings
    arr = allocate_array_memory(arr, N);

    // Read strings from the user
    printf("Enter strings (type 'end' or 'END' to stop):\n");
    for (int i = 0; i < N; i++) {
        fgets(temp, 81, stdin);
        temp[strcspn(temp, "\n")] = '\0'; // Remove newline character

        if (strcmp(temp, "end") == 0 || strcmp(temp, "END") == 0) {
            break;
        }

        // Allocate memory for each string and store it in the array
        arr[i] = allocate_string_memory(temp);
        count++;
    }

    // Display the stored strings
    display(arr, count);

    // Free the allocated memory
    free_array_memory(arr, count);

    return 0;
}
